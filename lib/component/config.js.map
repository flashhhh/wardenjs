{"version":3,"sources":["src/component/config.js"],"names":[],"mappings":";;;;;QAMgB,gBAAgB,GAAhB,gBAAgB;QAmBhB,QAAQ,GAAR,QAAQ;;;;kBAzBT,IAAI;;;;oBACF,MAAM;;;;uBACH,SAAS;;;;sBACV,QAAQ;;;;sBACD,YAAY;;AAE/B,SAAS,gBAAgB,CAAC,YAAY,EAAE;AAC7C,UAHY,KAAK,CAGX,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AACpC,MAAI,KAAK,GAAG,EAAE,CAAC;;;;;;AACf,yBAAwB,YAAY,8HAAE;UAA7B,WAAW;;AAClB,UAAI,QAAQ,GAAG,WAAW,CAAC;AAC3B,UAAI,CAAC,kBAAK,UAAU,CAAC,WAAW,CAAC,EAAE;AACjC,gBAAQ,GAAG,kBAAK,IAAI,SARlB,IAAI,EAQqB,WAAW,CAAC,CAAC;OACzC;;AAED,+BAAO,gBAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,GAAE,QAAQ,EAAC,oBAAoB,CAAC,CAAC,CAAC;AAC/E,WAAK,GAAG,KAAK,CAAC,MAAM,CAClB,gBAAG,WAAW,CAAC,QAAQ,CAAC,CACrB,MAAM,CAAC,IAAK,IAAK,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CACvC,GAAG,CAAC,IAAK,IAAK,kBAAK,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAC5C,CAAC;KACH;;;;;;;;;;;;;;;;AACD,SAAO,KAAK,CAAC;CACd;;AAEM,SAAS,QAAQ,CAAC,MAAM,EAAE;AAC/B,UAtBY,KAAK,CAsBX,MAAM,CAAC,MAAM,CAAC,CAAC;AACrB,UAvBY,KAAK,CAuBX,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,+BAA+B,CAAC,CAAC;AAC5E,kBAAgB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;CACvC;;AAEM,MAAM,IAAI,GAAG,qBAAQ,OAAO,CAAC,WAAU,YAAY,EAAE;AAC1D,QAAM,QAAQ,GAAG,kBAAK,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,YAAY,CAAC,CAAC;AACxD,SAAO,IAAI,CAAC,KAAK,EAAC,MAAM,gBAAG,QAAQ,CAAC,QAAQ,EAAE,qBAAQ,MAAM,EAAE,CAAC,CAAA,CAAC,CAAC;CAClE,CAAC,CAAC;QAHU,IAAI,GAAJ,IAAI","file":"src/component/config.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport suspend from 'suspend';\nimport assert from 'assert';\nimport {root, check} from '../util.js';\n\nexport function getScenarioFiles(scenarioDirs) {\n  check.array.of.string(scenarioDirs);\n  let files = [];\n  for (let scenarioDir of scenarioDirs) {\n    let fullPath = scenarioDir;\n    if (!path.isAbsolute(scenarioDir)) {\n      fullPath = path.join(root, scenarioDir);\n    }\n    \n    assert(fs.statSync(fullPath).isDirectory(), `${fullPath} is not a directory!`);\n    files = files.concat(\n      fs.readdirSync(fullPath)\n        .filter((item) => /^.*\\.js$/.test(item))\n        .map((item) => path.join(fullPath, item))\n    );\n  }\n  return files;\n}\n\nexport function validate(config) {\n  check.object(config);\n  check.array.of.string(config.scenarioDirs, 'Malformed config.scenarioDirs');\n  getScenarioFiles(config.scenarioDirs);\n}\n\nexport const load = suspend.promise(function*(relativePath) {\n  const fullPath = path.join(process.cwd(), relativePath);\n  return JSON.parse(yield fs.readFile(fullPath, suspend.resume()));\n});\n"]}