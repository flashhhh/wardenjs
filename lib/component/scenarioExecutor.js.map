{"version":3,"sources":["src/component/scenarioExecutor.js"],"names":[],"mappings":";;;;;QAIgB,GAAG,GAAH,GAAG;;;;sBAJC,YAAY;;sBACb,QAAQ;;;;;;AAGpB,SAAS,GAAG,CAAC,QAAQ,EAAE;AAC5B,UALM,KAAK,YAKG,CAAC,QAAQ,CAAC,CAAC;AACzB,SAAO,IAAI,OAAO,CAAC,OAAQ,IAAK;AAC9B,UAAM,MAAM,GAAG;AACb,cAAQ,EAAE,EAAE;AACZ,UAAI,EAAE,EAAE;AACR,WAAK,EAAE,IAAI;KACZ,CAAC;AACF,UAAM,OAAO,GAAG;AACd,aAAO,CAAC,IAAI,EAAE;AACZ,eAAO,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;OAClC;AACD,UAAI,CAAC,IAAI,EAAE;AACT,eAAO,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;OAC9B;AACD,aAAO,GAAG;AAAE,eAAO,MAAM,CAAC,SAAS,CAAC,CAAC;OAAE;AACvC,aAAO,GAAG;AAAE,eAAO,MAAM,CAAC,SAAS,CAAC,CAAC;OAAE;KACxC,CAAC;;AAEF,aAAS,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE;AAC3B,cAxBE,KAAK,CAwBD,MAAM,CAAC,IAAI,CAAC,CAAC;AACnB,YAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzB;;AAED,aAAS,MAAM,CAAC,MAAM,EAAE;AACtB,UAAI,MAAM,CAAC,KAAK,KAAK,IAAI,EAAE;AACzB,cAAM,KAAK,CAAC,CAAC,8CAA8C,GAAE,MAAM,CAAC,KAAK,EAAC,QAAQ,CAAC,CAAC,CAAC;OACtF;;AAED,cAjCE,KAAK,CAiCD,MAAM,CAAC,MAAM,CAAC,CAAC;AACrB,YAAM,QAAQ,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AACxC,+BAAO,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,uCAAuC,GAAE,QAAQ,EAAC,CAAC,CAAC,CAAC;;AAE9F,YAAM,CAAC,MAAM,GAAG,MAAM,CAAC;AACvB,aAAO,CAAC,MAAM,CAAC,CAAC;KACjB;;AAED,YAAQ,CAAC,OAAO,CAAC,CAAC;GACnB,CAAC,CAAC;CACJ","file":"src/component/scenarioExecutor.js","sourcesContent":["import {check} from '../util.js';\nimport assert from 'assert';\n//import suspend from 'suspend';\n\nexport function run(scenario) {\n  check.function(scenario);\n  return new Promise((resolve) => {\n    const result = {\n      warnings: [],\n      info: [],\n      state: null\n    };\n    const control = {\n      warning(text) {\n        return message(text, 'warnings');\n      },\n      info(text) {\n        return message(text, 'info');\n      },\n      success() { return finish('success'); },\n      failure() { return finish('failure'); }\n    };\n    \n    function message(text, type) {\n      check.string(text);\n      result[type].push(text);\n    }\n\n    function finish(status) {\n      if (result.state !== null) {\n        throw Error(`The running scenario is already finished with ${result.state} status!`);\n      }\n\n      check.string(status);\n      const statuses = ['success', 'failure'];\n      assert(statuses.indexOf(status) !== -1, `Status can be only one of this values: ${statuses}`);\n      \n      result.status = status;\n      resolve(result);\n    }\n    \n    scenario(control);\n  });\n}\n\n"]}