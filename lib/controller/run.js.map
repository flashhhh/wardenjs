{"version":3,"sources":["../../src/controller/run.js"],"names":[],"mappings":"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","file":"run.js","sourcesContent":["import {optionRequired} from '../cli.js';\nimport {run, load} from '../component/scenarioRunner.js';\nimport {load as loadConfig} from '../component/config.js';\nimport suspend from 'suspend';\nimport 'colors';\nimport os from 'os';\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport crypto from 'crypto';\nimport path from 'path';\nimport mime from 'mime';\n\nexport default function (commander) {\n  optionRequired('path');\n  if (commander.save) {\n    optionRequired('config');\n  }\n  const filePath = commander.path;\n  suspend.run(function*() {\n    console.log(`Trying to load the scenario under the ${filePath}`);\n    const scenario = load(filePath);\n    console.log('Loaded! Trying to start the scenario...');\n    if (typeof scenario.fn !== 'function') {\n      console.error('Scenario should be a function!');\n      process.exit(1);\n    }\n\n    function formattedPrint(message) {\n      console.log('\\n' + `===== ${message} =====`.bold + '\\n');\n    }\n\n    formattedPrint(`Start: ${scenario.name} (${filePath})`);\n    \n    const result = yield run(scenario);\n    \n    const statusColor = result.status === 'success' ? 'green' : 'red';\n    console.log(`Status: ${result.status[statusColor]}.`);\n    \n    const messageColor = {\n      info: 'cyan',\n      warning: 'yellow'\n    };\n    for (let type of ['info', 'warning']) {\n      if (result[type].length) {\n        console.log(`There was some ${type} messages:`);\n        for (let message of result[type]) {\n          console.log(`\\t${message}`[messageColor[type]]);\n        }\n      } else {\n        console.log(`There wasn\\'t any ${type} messages`);\n      }\n    }\n    \n    console.log(`Final message: ${result.finalMessage.blue}.`);\n\n    if (result.files.length) {\n      const tmpDir = path.join(\n        os.tmpdir(),\n        'wardenjs_tmp',\n        crypto.createHash('md5').update(filePath).digest('hex')\n      );\n\n      yield mkdirp(tmpDir, suspend.resume());\n      for (let file of result.files) {\n        const filePath = path.join(tmpDir, `${file.name}.${mime.extension(file.media)}`);\n        yield fs.writeFile(filePath, file.content, suspend.resume());\n      }\n      \n      console.log(\n        `There were ${result.files.length} file(s) attached.`,\n        `You can find them at: ${tmpDir.blue}`\n      );\n    }\n    \n    formattedPrint(`End: ${scenario.name} (${filePath})`);\n    \n    /**\n     * If it's a child process, let's send the result to the parent\n     * process through IPC\n     */\n    if (process.send) {\n      process.send({\n        type: 'SCENARIO_RESULT',\n        data: result\n      });\n    }\n    \n    if (commander.save) {\n      const configObj = yield loadConfig(commander.config);\n      const db = yield require('../component/daemon/postgres.js')(configObj.postgres);\n\n      const transaction = yield db.transaction();\n      const resultRow = yield db.models.result.create({\n        filePath,\n        name: result.name,\n        warning: result.warning,\n        info: result.info,\n        status: result.status,\n        finalMessage: result.finalMessage\n      }, {transaction});\n      if (result.files.length) {\n        yield Promise.all(result.files.map((file) => {\n          return db.models.file.create(\n            Object.assign({result_id: resultRow.id}, file),\n            { transaction }\n          );\n        }));\n      }\n      transaction.commit();\n      db.close();\n    }\n  });\n}\n"]}